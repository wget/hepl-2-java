/*
 * Copyright (C) 2018 wget
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package be.wget.inpres.java.restaurantroommanager.guis;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 *
 * @author wget
 */
public class WaiterChangeQuestionGui extends javax.swing.JDialog implements KeyListener {

    private boolean waiterChanging;
    /**
     * Creates new form WaiterChangeQuestionGui
     */
    public WaiterChangeQuestionGui(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        this.setLocationRelativeTo(null);
        this.setResizable(false);

        this.currentWaiterTextfield.setEditable(false);
        this.waiterChangeButton.addKeyListener(this);
        this.waiterContinueButton.addKeyListener(this);
        this.waiterContinueButton.requestFocus();
        this.waiterChanging = false;
    }
    
    public void setWaiterName(String waiterName) {
        this.currentWaiterTextfield.setText(waiterName);
        this.waiterContinueButton.setText("Continue as " + waiterName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currentWaiterLabel = new javax.swing.JLabel();
        currentWaiterTextfield = new javax.swing.JTextField();
        waiterChangeButton = new javax.swing.JButton();
        waiterContinueButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        currentWaiterLabel.setText("Current waiter:");

        waiterChangeButton.setText("Change");
        waiterChangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waiterChangeButtonActionPerformed(evt);
            }
        });

        waiterContinueButton.setText("Continue as ...");
        waiterContinueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waiterContinueButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(currentWaiterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                        .addComponent(currentWaiterTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(waiterChangeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(waiterContinueButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentWaiterTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentWaiterLabel))
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(waiterChangeButton)
                    .addComponent(waiterContinueButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void waiterChangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waiterChangeButtonActionPerformed
        this.waiterChanging = true;
        this.setVisible(false);
    }//GEN-LAST:event_waiterChangeButtonActionPerformed

    private void waiterContinueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waiterContinueButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_waiterContinueButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentWaiterLabel;
    private javax.swing.JTextField currentWaiterTextfield;
    private javax.swing.JButton waiterChangeButton;
    private javax.swing.JButton waiterContinueButton;
    // End of variables declaration//GEN-END:variables

    public boolean isWaiterChanging() {
        return this.waiterChanging;
    }

    @Override
    public void keyTyped(KeyEvent ke) {
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        if (ke.getKeyCode() == KeyEvent.VK_LEFT ||
            ke.getKeyCode() == KeyEvent.VK_RIGHT) {
            if (this.waiterContinueButton.hasFocus()) {
                this.waiterChangeButton.requestFocus();
            } else {
                this.waiterContinueButton.requestFocus();
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent ke) {
    }
}
