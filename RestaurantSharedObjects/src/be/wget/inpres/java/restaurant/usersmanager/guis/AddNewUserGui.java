/*
 * Copyright (C) 2018 wget
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package be.wget.inpres.java.restaurant.usersmanager.guis;

import be.wget.inpres.java.restaurant.config.RestaurantConfig;
import be.wget.inpres.java.restaurant.usersmanager.UsersManager;
import be.wget.inpres.java.restaurant.usersmanager.UsersManagerPasswordInvalidException;
import be.wget.inpres.java.restaurant.usersmanager.UsersManagerSerializationException;
import be.wget.inpres.java.restaurant.usersmanager.UsersManagerUserAlreadyExistsException;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author wget
 */
public class AddNewUserGui extends JDialog implements KeyListener {

    private boolean isCancelled = false;
    private UsersManager usersManager;

    /**
     * Creates new form AboutGui
     */
    public AddNewUserGui(
        Frame parent,
        boolean modal,
        RestaurantConfig config,
        UsersManager usersManager) {
        super(parent, modal);
        initComponents();
        this.setTitle("Add new user");
        this.usersManager = usersManager;
        this.newPasswordTextfield.addKeyListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        userNameLabel = new javax.swing.JLabel();
        newPasswordLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        newPasswordTextfield = new javax.swing.JPasswordField();
        usernameTextfied = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        okButton.setText("Add new user");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        userNameLabel.setText("Username:");

        newPasswordLabel.setText("New password:");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okButton))
                    .addComponent(userNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                    .addComponent(newPasswordTextfield)
                    .addComponent(usernameTextfied))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userNameLabel)
                .addGap(18, 18, 18)
                .addComponent(usernameTextfied, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(newPasswordLabel)
                .addGap(18, 18, 18)
                .addComponent(newPasswordTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        this.performChange();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.isCancelled = true;
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JPasswordField newPasswordTextfield;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField usernameTextfied;
    // End of variables declaration//GEN-END:variables

    private void performChange() {
        try {
            StringBuilder newPassword = new StringBuilder();
            for (int i = 0; i < this.newPasswordTextfield.getPassword().length; i++) {
                newPassword.append(this.newPasswordTextfield.getPassword()[i]);
            }
            this.usersManager.addUser(
                    this.usernameTextfied.getText(),
                    newPassword.toString());
        } catch (UsersManagerUserAlreadyExistsException ex) {
            JOptionPane.showMessageDialog(this,
                "The user you specified already exists.",
                "Username invalid",
                JOptionPane.ERROR_MESSAGE);
            return;
        } catch (UsersManagerPasswordInvalidException ex) {
            JOptionPane.showMessageDialog(this,
                "The current password of the current user is invalid.",
                "Password invalid",
                JOptionPane.ERROR_MESSAGE);
            return;
        } catch (IOException | UsersManagerSerializationException ex) {
            JOptionPane.showMessageDialog(this,
                "An issue occurred when trying to store the new user to the file. " +
                    "The password might likely have not been changed.",
                "Serialization issue",
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        this.setVisible(false);
    }
    
    public boolean isGuiCancelled() {
        return this.isCancelled;
    }

    @Override
    public void keyTyped(KeyEvent ke) {
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        if (ke.getKeyCode() == KeyEvent.VK_ENTER &&
            ke.getSource() == this.newPasswordTextfield) {
            this.performChange();
        }
    }

    @Override
    public void keyReleased(KeyEvent ke) {
    }
}
