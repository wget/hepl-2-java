/*
 * Copyright (C) 2018 wget
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package be.wget.inpres.java.restaurant.kitchenmanager.guis;

import be.wget.inpres.java.restaurant.config.RestaurantConfig;
import be.wget.inpres.java.restaurant.myutils.StringSlicer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import network.NetworkBasicServer;

/**
 *
 * @author wget
 */
public class KitchenManagerGui 
        extends javax.swing.JFrame
        implements TableModelListener,
                   ListSelectionListener {

    private NetworkBasicServer serverNetworkConnection;
    private RestaurantConfig applicationConfig;
    private Icon applicationIcon;
    private ArrayList<ArrayList<Object>> ordersReceived;
    private int platesReceivedTableModelSizeBefore;
    private int platesReceivedTableModelSizeAfter;
    private int platesBeingPreparedTableModelSizeBefore;
    private int platesBeingPreparedTableModelSizeAfter;

    private final int QUANTITY_COLUMN = 0;
    private final int PLATE_CODE_COLUMN = 1;
    private final int TABLE_COLUMN = 2;
    private final int ARRIVAL_TIME_COLUM = 3;
    private final int BEING_PREPARED_COLUMN = 4;
    private final int READY_TO_SERVE_COLUMN = 5;
    private final int SERVED_COLUMN = 6;
    
    /**
     * Creates new form KitchenManagerGui
     */
    public KitchenManagerGui() {
        initComponents();
        
        this.applicationConfig = new RestaurantConfig();

        try {
            this.applicationIcon = new ImageIcon(ImageIO.read(
                KitchenManagerGui.class.getResourceAsStream("/assets/appIcon.png")));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                this,
                "The \"assets\" folder couldn't be found.",
                this.applicationConfig.getRestaurantName(),
                JOptionPane.WARNING_MESSAGE);
            this.applicationIcon = new ImageIcon();
        }
        this.setIconImage(((ImageIcon)this.applicationIcon).getImage());

        if (!this.applicationConfig.isConfigFileDefined()) {
            JOptionPane.showMessageDialog(
                this,
                "Unable to find the settings file \""
                + this.applicationConfig.getSettingsFilename()
                + "\". Using the defaults settings.",
                this.applicationConfig.getRestaurantName(),
                JOptionPane.WARNING_MESSAGE);
        }

        this.setTitle(this.applicationConfig.getRestaurantName() + ": KitchenManager");
        this.setLocationRelativeTo(null);
        this.platesReceivedTable.setModel(new PlatesReceivedTableModel());
        this.platesReceivedTable.setAutoCreateRowSorter(true);
        
        this.platesBeingPreparedTable.setModel(new PlatesBeingPreparedTableModel());
        this.platesBeingPreparedTable.setAutoCreateRowSorter(true);
        this.platesBeingPreparedTable.getModel().addTableModelListener(this);
        this.platesBeingPreparedTable.getSelectionModel().addListSelectionListener(this);
        
        this.ordersReceived = new ArrayList<>();
        this.startServer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        orderReceivedCheckbox = new javax.swing.JCheckBox();
        orderViewButton = new javax.swing.JButton();
        orderReceivedLabel = new javax.swing.JLabel();
        orderAcceptButton = new javax.swing.JButton();
        orderPlatesLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        platesReceivedTable = new javax.swing.JTable();
        platesBeingPreparedLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        platesBeingPreparedTable = new javax.swing.JTable();
        orderReadyNotifyButton = new javax.swing.JButton();
        orderDeclineButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        orderReceivedCheckbox.setText("Order received");

        orderViewButton.setText("View order");
        orderViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderViewButtonActionPerformed(evt);
            }
        });

        orderReceivedLabel.setText(">>");

        orderAcceptButton.setText("Accept order");
        orderAcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderAcceptButtonActionPerformed(evt);
            }
        });

        orderPlatesLabel.setText("Plates of the order:");

        platesReceivedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Quantity", "Plate", "Table", "Hour"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        platesReceivedTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(platesReceivedTable);

        platesBeingPreparedLabel.setText("Plates currently being prepared:");

        platesBeingPreparedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Quantity", "Plate", "Table", "Arrival time", "Being prepared", "Ready to serve", "Served"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        platesBeingPreparedTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(platesBeingPreparedTable);

        orderReadyNotifyButton.setText("Notify order ready");
        orderReadyNotifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderReadyNotifyButtonActionPerformed(evt);
            }
        });

        orderDeclineButton.setText("Decline order");
        orderDeclineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderDeclineButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orderPlatesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(platesBeingPreparedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(orderReadyNotifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(orderReceivedCheckbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 320, Short.MAX_VALUE)
                                .addComponent(orderViewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(orderReceivedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(orderAcceptButton, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                            .addComponent(orderDeclineButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderReceivedCheckbox)
                    .addComponent(orderViewButton)
                    .addComponent(orderAcceptButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orderReceivedLabel)
                    .addComponent(orderDeclineButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderPlatesLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(platesBeingPreparedLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(orderReadyNotifyButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void orderViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderViewButtonActionPerformed

        String answer = this.serverNetworkConnection.getMessage();
        this.ordersReceived.clear();
        // RIEN is provided by the underlying networking lib provided by the
        // teacher. Cannot modify it to have a more elegant English based
        // application.
        if (answer == null || answer.isEmpty() || answer.equals("RIEN")) {
            JOptionPane.showMessageDialog(
                this,
                "There is no order received.",
                this.applicationConfig.getRestaurantName(),
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        this.orderReceivedLabel.setText(">> " + answer.substring(0, 15) + "...");
        
        // Add orders to both jtables
        StringSlicer orderLines = new StringSlicer(
            answer,
            this.applicationConfig.getOrderLineDelimiter());
        StringSlicer orderFields;
        PlatesReceivedTableModel platesReceivedTableModel =
            (PlatesReceivedTableModel)platesReceivedTable.getModel();
        PlatesBeingPreparedTableModel platesBeingPreparedTableModel =
            (PlatesBeingPreparedTableModel)platesBeingPreparedTable.getModel();
        platesReceivedTableModelSizeBefore = platesReceivedTableModel.getRowCount();
        platesBeingPreparedTableModelSizeBefore = platesBeingPreparedTableModel.getRowCount();
        int platesReceivedTableRow = platesReceivedTableModelSizeBefore;
        int platesBeingPreparedTableRow = platesBeingPreparedTableModelSizeBefore;
        for (String orderLine: orderLines.listComponents()) {
            orderFields = new StringSlicer(
                orderLine,
                this.applicationConfig.getOrderFieldDelimiter());
            ArrayList<Object> platesReceivedTableLine = new ArrayList<>();
            ArrayList<Object> platesBeingPreparedTableLine = new ArrayList<>();
            for (String orderField: orderFields.listComponents()) {
                platesReceivedTableLine.add(orderField);
                platesBeingPreparedTableLine.add(orderField);
            
            }
            
            // Needed to initialize the checkboxes values for the second Jtable
            platesBeingPreparedTableLine.add(false);
            platesBeingPreparedTableLine.add(false);
            platesBeingPreparedTableLine.add(false);
            
            // Needed to know whether the cells can be edited or not
            // Disable edition of the 4 first columns for first and second tables
            for (int i = this.QUANTITY_COLUMN; i <= this.ARRIVAL_TIME_COLUM; i++) {
                platesReceivedTableModel.setCellEditable(
                    platesReceivedTableRow, i, false);
                platesBeingPreparedTableModel.setCellEditable(
                    platesBeingPreparedTableRow, i, false);
            }
            // Enable edition of the last 3 columns of the second table
            for (int i = this.BEING_PREPARED_COLUMN; i <= this.SERVED_COLUMN; i++) {
                platesBeingPreparedTableModel.setCellEditable(
                    platesBeingPreparedTableRow, i, true);
            }
            
            platesReceivedTableModel.addRow(platesReceivedTableLine.toArray());
            platesBeingPreparedTableModel.addRow(platesBeingPreparedTableLine.toArray());
            this.ordersReceived.add(platesReceivedTableLine);
            
            platesReceivedTableRow++;
            platesBeingPreparedTableRow++;
        }
        platesReceivedTableModelSizeAfter = platesReceivedTableModel.getRowCount();
        platesBeingPreparedTableModelSizeAfter = platesBeingPreparedTableModel.getRowCount();
    }//GEN-LAST:event_orderViewButtonActionPerformed

    private void orderAcceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderAcceptButtonActionPerformed
        if (this.ordersReceived.isEmpty()) {
            JOptionPane.showMessageDialog(
                this,
                "No order to accept as no new order has been received yet.",
                this.applicationConfig.getRestaurantName(),
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        this.serverNetworkConnection.sendMessage(
            this.applicationConfig.getKitchenOrderAcceptedPayload());
    }//GEN-LAST:event_orderAcceptButtonActionPerformed

    private void orderDeclineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderDeclineButtonActionPerformed
        if (this.ordersReceived.isEmpty()) {
            JOptionPane.showMessageDialog(
                this,
                "No order to decline as no new order has been received yet.",
                this.applicationConfig.getRestaurantName(),
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        SpecifyReasonOrderDeclinedGui orderRefusedGui =
            new SpecifyReasonOrderDeclinedGui(this, this.applicationConfig);
        orderRefusedGui.setVisible(true);
        this.serverNetworkConnection.sendMessage(
            this.applicationConfig.getKitchenOrderDeclinedPayload() +
            this.applicationConfig.getOrderFieldDelimiter() +
            orderRefusedGui.getOrderRefusedReason());
        orderRefusedGui.dispose();
        
        DefaultTableModel platesReceivedTableModel =
            (DefaultTableModel)platesReceivedTable.getModel();
        DefaultTableModel platesBeingPreparedTableModel =
            (DefaultTableModel)platesBeingPreparedTable.getModel();
        
        for (int i = this.platesReceivedTableModelSizeBefore, j = i;
             i < this.platesReceivedTableModelSizeAfter;
             i++) {
            platesReceivedTableModel.removeRow(j);
        }
        for (int i = this.platesBeingPreparedTableModelSizeBefore, j = i;
             i < this.platesBeingPreparedTableModelSizeAfter;
             i++) {
            platesBeingPreparedTableModel.removeRow(j);
        }
        this.ordersReceived.clear();
    }//GEN-LAST:event_orderDeclineButtonActionPerformed

    private void orderReadyNotifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderReadyNotifyButtonActionPerformed
        DefaultTableModel platesBeingPreparedTableModel =
            (DefaultTableModel)platesBeingPreparedTable.getModel();
        ArrayList<String> ordersReady;
        boolean orderBeingPrepared = false;
        int ordersReadyCount = 0;
        for (int i = 0; i < platesBeingPreparedTableModel.getRowCount(); i++) {
            orderBeingPrepared = (Boolean)platesBeingPreparedTableModel.getValueAt(i, 4);
            if (orderBeingPrepared) {
                System.out.println(platesBeingPreparedTableModel.getValueAt(i, 1).toString() + " is being prepared");
                ordersReadyCount++;
            } else {
                System.out.println(platesBeingPreparedTableModel.getValueAt(i, 1).toString() + " is NOT being prepared");
            }
        }
        if (ordersReadyCount == 0) {
            JOptionPane.showMessageDialog(
                this,
                "No order to announce as no new order has been marked as ready to serve yet.",
                this.applicationConfig.getRestaurantName(),
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
    }//GEN-LAST:event_orderReadyNotifyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.setProperty("awt.useSystemAAFontSettings","lcd");
        System.setProperty("swing.aatext", "true");
        
        // Set the GTK look and feel only if it exists.
        for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
            if ("com.sun.java.swing.plaf.gtk.GTKLookAndFeel".equals(info.getClassName())) {
                try {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                } catch (Exception e) {}
                break;
            }
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KitchenManagerGui().setVisible(true);
            }
        });
    }
    
    private void startServer() {
        int port;
        try {
            port = new RestaurantConfig().getServerPort();
        
            System.out.println("DEBUG Server listening on " + port);
            this.serverNetworkConnection = new NetworkBasicServer(port, this.orderReceivedCheckbox);
            System.out.println("Server listening on " + port);
        
        } catch (Exception ex) {
            Logger.getLogger(KitchenManagerGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton orderAcceptButton;
    private javax.swing.JButton orderDeclineButton;
    private javax.swing.JLabel orderPlatesLabel;
    private javax.swing.JButton orderReadyNotifyButton;
    private javax.swing.JCheckBox orderReceivedCheckbox;
    private javax.swing.JLabel orderReceivedLabel;
    private javax.swing.JButton orderViewButton;
    private javax.swing.JLabel platesBeingPreparedLabel;
    private javax.swing.JTable platesBeingPreparedTable;
    private javax.swing.JTable platesReceivedTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {

        // Check if this concerns the second table or not.
        if (e.getSource() != this.platesBeingPreparedTable.getModel()) {
            return;
        }
        
        // Check if this only concerns UPDATE events. We don't care about
        // insertions here.
        if (e.getType() != TableModelEvent.UPDATE) {
            return;
        }

        PlatesBeingPreparedTableModel platesBeingPreparedTableModel =
            (PlatesBeingPreparedTableModel)platesBeingPreparedTable.getModel();
        
        if (e.getColumn() == this.BEING_PREPARED_COLUMN) {
            System.out.println("BEING_PREPARED_COLUMN DEBUG");
            platesBeingPreparedTableModel.setCellEditable(
                e.getFirstRow(), this.BEING_PREPARED_COLUMN, false);
            platesBeingPreparedTableModel.setCellEditable(
                e.getFirstRow(), this.READY_TO_SERVE_COLUMN, true);
            return;
        }

        if (e.getColumn() == this.READY_TO_SERVE_COLUMN) {
            System.out.println("READY_TO_SERVE_COLUMN DEBUG");
            platesBeingPreparedTableModel.setCellEditable(
                e.getFirstRow(), this.READY_TO_SERVE_COLUMN, false);
            platesBeingPreparedTableModel.setCellEditable(
                e.getFirstRow(), this.SERVED_COLUMN, true);
            return;
        }

        if (e.getColumn() == this.SERVED_COLUMN) {
            System.out.println("SERVED_COLUMN DEBUG");
            platesBeingPreparedTableModel.setCellEditable(
                e.getFirstRow(), this.SERVED_COLUMN, false);
            return;
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        System.out.println("DEBUG valueChanged first index: " + e.getFirstIndex());
        System.out.println("DEBUG valueChanged last index: " + e.getLastIndex());
    }

    class PlatesReceivedTableModel extends DefaultTableModel {

        private HashMap<ArrayList, Boolean> cellsEditableState;
        Class[] types = new Class [] {
            Integer.class,
            String.class,
            String.class,
            String.class
        };

        public PlatesReceivedTableModel() {
            super(new Object [][] {

            },
            new String [] {
                "Quantity", "Plate", "Table", "Arrival time"
            });
            this.cellsEditableState = new HashMap<>();
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public void setCellEditable(int row, int column, boolean state) {
            System.out.println("Setting cell editabl state for row: " + row + ", column: " + column + ", value: " + state);
            ArrayList<Integer> key = new ArrayList<>();
            key.add(row);
            key.add(column);
            this.cellsEditableState.put(key, state);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            ArrayList<Integer> key = new ArrayList<>();
            key.add(row);
            key.add(column);
            System.out.println("Requesting isCellEditable for row: " + row + ", column: " + column + ", value: " + this.cellsEditableState.get(key));
            return this.cellsEditableState.get(key);
        }
    }
    
    class PlatesBeingPreparedTableModel extends DefaultTableModel {
        
        private HashMap<ArrayList, Boolean> cellsEditableState;
        Class[] types = new Class [] {
            Integer.class,
            String.class,
            String.class,
            String.class,
            Boolean.class,
            Boolean.class,
            Boolean.class
        };

        public PlatesBeingPreparedTableModel() {
            super(new Object [][] {

            },
            new String [] {
                "Quantity", "Plate", "Table", "Arrival time",
                "Being prepared", "Ready to serve", "Served"
            });
            this.cellsEditableState = new HashMap<>();
        }
        
        @Override
        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }
        
        public void setCellEditable(int row, int column, boolean state) {
            System.out.println("Setting cell editabl state for row: " + row + ", column: " + column + ", value: " + state);
            ArrayList<Integer> key = new ArrayList<>();
            key.add(row);
            key.add(column);
            this.cellsEditableState.put(key, state);
        }
        
        @Override
        public boolean isCellEditable(int row, int column) {
            ArrayList<Integer> key = new ArrayList<>();
            key.add(row);
            key.add(column);
            System.out.println("Requesting isCellEditable for row: " + row + ", column: " + column + ", value: " + this.cellsEditableState.get(key));
            return this.cellsEditableState.get(key);
        }
    }
}
